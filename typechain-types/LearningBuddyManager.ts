/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace LearningBuddyManager {
  export type LearningBuddyStruct = {
    id: BigNumberish;
    name: string;
    level: BigNumberish;
    xp: BigNumberish;
    streak: BigNumberish;
    badges: string[];
    lastActive: BigNumberish;
    owner: AddressLike;
  };

  export type LearningBuddyStructOutput = [
    id: bigint,
    name: string,
    level: bigint,
    xp: bigint,
    streak: bigint,
    badges: string[],
    lastActive: bigint,
    owner: string
  ] & {
    id: bigint;
    name: string;
    level: bigint;
    xp: bigint;
    streak: bigint;
    badges: string[];
    lastActive: bigint;
    owner: string;
  };
}

export interface LearningBuddyManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buddies"
      | "claimBadge"
      | "completeLesson"
      | "createBuddy"
      | "getBuddiesByOwner"
      | "getBuddy"
      | "ownerToBuddies"
      | "updateStreak"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BadgeClaimed"
      | "BuddyCreated"
      | "LessonCompleted"
      | "StreakUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buddies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimBadge",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "completeLesson",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createBuddy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getBuddiesByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuddy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToBuddies",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStreak",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "buddies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimBadge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeLesson",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBuddy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuddiesByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBuddy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerToBuddies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStreak",
    data: BytesLike
  ): Result;
}

export namespace BadgeClaimedEvent {
  export type InputTuple = [buddyId: BigNumberish, badge: string];
  export type OutputTuple = [buddyId: bigint, badge: string];
  export interface OutputObject {
    buddyId: bigint;
    badge: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuddyCreatedEvent {
  export type InputTuple = [
    buddyId: BigNumberish,
    owner: AddressLike,
    name: string
  ];
  export type OutputTuple = [buddyId: bigint, owner: string, name: string];
  export interface OutputObject {
    buddyId: bigint;
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LessonCompletedEvent {
  export type InputTuple = [
    buddyId: BigNumberish,
    xpGained: BigNumberish,
    newXp: BigNumberish,
    newLevel: BigNumberish
  ];
  export type OutputTuple = [
    buddyId: bigint,
    xpGained: bigint,
    newXp: bigint,
    newLevel: bigint
  ];
  export interface OutputObject {
    buddyId: bigint;
    xpGained: bigint;
    newXp: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StreakUpdatedEvent {
  export type InputTuple = [buddyId: BigNumberish, newStreak: BigNumberish];
  export type OutputTuple = [buddyId: bigint, newStreak: bigint];
  export interface OutputObject {
    buddyId: bigint;
    newStreak: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LearningBuddyManager extends BaseContract {
  connect(runner?: ContractRunner | null): LearningBuddyManager;
  waitForDeployment(): Promise<this>;

  interface: LearningBuddyManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buddies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        id: bigint;
        name: string;
        level: bigint;
        xp: bigint;
        streak: bigint;
        lastActive: bigint;
        owner: string;
      }
    ],
    "view"
  >;

  claimBadge: TypedContractMethod<
    [buddyId: BigNumberish, badge: string],
    [void],
    "nonpayable"
  >;

  completeLesson: TypedContractMethod<
    [buddyId: BigNumberish, xpGained: BigNumberish],
    [void],
    "nonpayable"
  >;

  createBuddy: TypedContractMethod<[name: string], [void], "nonpayable">;

  getBuddiesByOwner: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  getBuddy: TypedContractMethod<
    [buddyId: BigNumberish],
    [LearningBuddyManager.LearningBuddyStructOutput],
    "view"
  >;

  ownerToBuddies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  updateStreak: TypedContractMethod<
    [buddyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buddies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, bigint, string] & {
        id: bigint;
        name: string;
        level: bigint;
        xp: bigint;
        streak: bigint;
        lastActive: bigint;
        owner: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimBadge"
  ): TypedContractMethod<
    [buddyId: BigNumberish, badge: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "completeLesson"
  ): TypedContractMethod<
    [buddyId: BigNumberish, xpGained: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createBuddy"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBuddiesByOwner"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getBuddy"
  ): TypedContractMethod<
    [buddyId: BigNumberish],
    [LearningBuddyManager.LearningBuddyStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "ownerToBuddies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateStreak"
  ): TypedContractMethod<[buddyId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "BadgeClaimed"
  ): TypedContractEvent<
    BadgeClaimedEvent.InputTuple,
    BadgeClaimedEvent.OutputTuple,
    BadgeClaimedEvent.OutputObject
  >;
  getEvent(
    key: "BuddyCreated"
  ): TypedContractEvent<
    BuddyCreatedEvent.InputTuple,
    BuddyCreatedEvent.OutputTuple,
    BuddyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LessonCompleted"
  ): TypedContractEvent<
    LessonCompletedEvent.InputTuple,
    LessonCompletedEvent.OutputTuple,
    LessonCompletedEvent.OutputObject
  >;
  getEvent(
    key: "StreakUpdated"
  ): TypedContractEvent<
    StreakUpdatedEvent.InputTuple,
    StreakUpdatedEvent.OutputTuple,
    StreakUpdatedEvent.OutputObject
  >;

  filters: {
    "BadgeClaimed(uint256,string)": TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;
    BadgeClaimed: TypedContractEvent<
      BadgeClaimedEvent.InputTuple,
      BadgeClaimedEvent.OutputTuple,
      BadgeClaimedEvent.OutputObject
    >;

    "BuddyCreated(uint256,address,string)": TypedContractEvent<
      BuddyCreatedEvent.InputTuple,
      BuddyCreatedEvent.OutputTuple,
      BuddyCreatedEvent.OutputObject
    >;
    BuddyCreated: TypedContractEvent<
      BuddyCreatedEvent.InputTuple,
      BuddyCreatedEvent.OutputTuple,
      BuddyCreatedEvent.OutputObject
    >;

    "LessonCompleted(uint256,uint256,uint256,uint256)": TypedContractEvent<
      LessonCompletedEvent.InputTuple,
      LessonCompletedEvent.OutputTuple,
      LessonCompletedEvent.OutputObject
    >;
    LessonCompleted: TypedContractEvent<
      LessonCompletedEvent.InputTuple,
      LessonCompletedEvent.OutputTuple,
      LessonCompletedEvent.OutputObject
    >;

    "StreakUpdated(uint256,uint256)": TypedContractEvent<
      StreakUpdatedEvent.InputTuple,
      StreakUpdatedEvent.OutputTuple,
      StreakUpdatedEvent.OutputObject
    >;
    StreakUpdated: TypedContractEvent<
      StreakUpdatedEvent.InputTuple,
      StreakUpdatedEvent.OutputTuple,
      StreakUpdatedEvent.OutputObject
    >;
  };
}
